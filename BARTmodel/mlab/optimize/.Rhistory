legend = sort(top_crimes$Var1),
fill = rainbow(nrow(holiday_comparison_df)), cex=0.5)
par(xpd=NA)
barplot(as.matrix(holiday_comparison_df), main="Crimes in Special Days", col=rainbow(nrow(holiday_comparison_df)), xlab="Special Days", bty='L')
legend(
legend = sort(top_crimes$Var1),
fill = rainbow(nrow(holiday_comparison_df)), cex=0.5)
par(xpd=NA)
barplot(as.matrix(holiday_comparison_df), main="Crimes in Special Days", col=rainbow(nrow(holiday_comparison_df)), xlab="Special Days", bty='L')
legend(5,-10,
legend = sort(top_crimes$Var1),
fill = rainbow(nrow(holiday_comparison_df)), cex=0.5)
par(xpd=NA)
barplot(as.matrix(holiday_comparison_df), main="Crimes in Special Days", col=rainbow(nrow(holiday_comparison_df)), xlab="Special Days", bty='L')
legend("topright"
legend = sort(top_crimes$Var1),
par(xpd=TRUE)
barplot(as.matrix(holiday_comparison_df), main="Crimes in Special Days", col=rainbow(nrow(holiday_comparison_df)), xlab="Special Days", bty='L')
legend("topright"
legend = sort(top_crimes$Var1),
par(xpd=TRUE)
barplot(as.matrix(holiday_comparison_df), main="Crimes in Special Days", col=rainbow(nrow(holiday_comparison_df)), xlab="Special Days", bty='L')
legend("topright",
legend = sort(top_crimes$Var1),
fill = rainbow(nrow(holiday_comparison_df)), cex=0.5)
par(xpd=TRUE)
barplot(as.matrix(holiday_comparison_df), main="Crimes in Special Days", col=rainbow(nrow(holiday_comparison_df)), xlab="Special Days", bty='L')
legend("topright",
legend = sort(top_crimes$Var1),
fill = rainbow(nrow(holiday_comparison_df)), cex=0.4)
crime_by_time$Time <- as.POSIXct(train)
crime_by_time$Time <- as.POSIXct(train$Date)
train$DateOnly
train$Date
train$Date
train <- read.csv(file="train.csv")
test <- read.csv(file="test.csv")
summary(train)
# Get top crimes
crime_categories_df <- as.data.frame(table(train$Category))
crime_categories_df[with(crime_categories_df, order(-Freq)),]
top_crimes <- head(crime_categories_df[with(crime_categories_df, order(-Freq)),], n=10)
# Create data for the graph.
x <- top_crimes$Freq
labels <- top_crimes$Var1
piepercent <- round(100*x/sum(x), 1)
# Plot the chart.
pie(x, labels = piepercent, main = "Top 10 Crimes",col = rainbow(length(x)))
legend("right", as.character(labels), cex = 0.8,
fill = rainbow(length(x)))
table(train$Category ,train$DayOfWeek)
g <- ggplot(train, aes(DayOfWeek))
g + geom_bar(aes(fill = Category)) + theme(legend.position="bottom")
train$Year <- substring(train$Dates, 1, 4)
train$Month <- substring(train$Dates, 6, 7)
crime_history <- head(as.vector(table(train$Month,train$Year)), -12)
crime_history
crime_ts <- ts(crime_history, frequency=12, start=c(2003,1))
crime_ts
plot.ts(crime_ts)
crime_components <- decompose(crime_ts)
plot(crime_components)
train_incomplete <- subset(train, Year != 2015)
tb <- table(train_incomplete$Month, train_incomplete$Category)
df <- data.frame(month=as.integer(row.names(tb)), crime_freq=as.vector(tb), crime_categories=rep(colnames(tb), each=length(row.names(tb))))
# plot
ggplot(data = df, aes(x=month, y=crime_freq)) + geom_line(aes(colour=crime_categories)) + theme(legend.position="left")
# Create the data for the chart.
tb <- table(train_incomplete$Month, train_incomplete$Category)
v = rowSums(tb)
# Plot the bar chart.
plot(v,type = "o", col = "red", xlab = "Month", ylab = "Crime Frequency",
main = "Monthly Crime")
library(ggplot2)
library(ggmap)
library(maptools)
library(ggthemes)
library(rgeos)
library(broom)
library(dplyr)
library(plyr)
library(grid)
library(gridExtra)
library(reshape2)
library(scales)
# And another that we will use for maps
mapTheme <- function(base_size = 12) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = 18,colour = "black"),
plot.subtitle=element_text(face="italic"),
plot.caption=element_text(hjust=0),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_line("grey80", size = 0.1),
strip.text = element_text(size=12),
axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "grey80", color = "white"),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_text(colour = "black", face = "italic"),
legend.text = element_text(colour = "black", face = "italic"))
}
# Define some palettes
palette_9_colors <- c("#0DA3A0","#2999A9","#458FB2","#6285BB","#7E7CC4","#9A72CD","#B768D6","#D35EDF","#F055E9")
palette_8_colors <- c("#0DA3A0","#2D97AA","#4D8CB4","#6E81BF","#8E76C9","#AF6BD4","#CF60DE","#F055E9")
palette_7_colors <- c("#2D97AA","#4D8CB4","#6E81BF","#8E76C9","#AF6BD4","#CF60DE","#F055E9")
palette_1_colors <- c("#0DA3A0")
# Read it into R as a spatial polygons data frame & plot
neighb <- readShapePoly("SF_neighborhoods")
plot(neighb)
# Define the bounding box
box <- neighb@bbox
# Manipulate these values slightly so that we get some padding on our basemap between the edge of the data and the edge of the map
sf_bbox <- c(left = bbox[1, 1] - .01, bottom = bbox[2, 1] - .005,
right = bbox[1, 2] + .01, top = bbox[2, 2] + .005)
# Download the basemap
basemap <- get_stamenmap(
bbox = sf_bbox,
zoom = 13,
maptype = "toner-lite")
# Map it
bmMap <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco basemap")
prices_mapped_by_year <- ggmap(basemap) +
geom_point(data = crime_location, aes(x = X, y = Y, color = Category),
size = .25, alpha = 0.6) +
facet_wrap(~Year, scales = "fixed", ncol = 4) +
coord_map() +
mapTheme() + theme(legend.position = "right") +
labs(title="San Francisco Crimes by Year",
subtitle="2003 - 2015")
prices_mapped_by_year
train[, c("X", "Y", "Year", "Category")]
crime_location <- data.frame( train[, c("X", "Y", "Year", "Category")] )
crime_location
# Manipulate these values slightly so that we get some padding on our basemap between the edge of the data and the edge of the map
sf_bbox <- c(left = bbox[1, 1] - .01, bottom = bbox[2, 1] - .005,
right = bbox[1, 2] + .01, top = bbox[2, 2] + .005)
# Download the basemap
basemap <- get_stamenmap(
bbox = sf_bbox,
zoom = 13,
maptype = "toner-lite")
# Map it
bmMap <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco Crime Map")
bmMap + geom_point(data=crime_location, aes(x=X, y=Y, color=Category), size=0.7, alpha=0.3) + theme(legend.position = "right")
top_crime_map <- crime_location[crime_location$Category %in% as.vector(top_crimes$Var1),]
# Map it
bmMap <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco basemap")
prices_mapped_by_year <- ggmap(basemap) +
geom_point(data = top_crime_map, aes(x = X, y = Y, color = Category),
size = .25, alpha = 0.6) +
facet_wrap(~Year, scales = "fixed", ncol = 4) +
coord_map() +
mapTheme() + theme(legend.position = "right") +
labs(title="Top 10 Crimes in San Francisco",
subtitle="2003 - 2015")
prices_mapped_by_year
#train$Descript
library(tm)
descript <- removeNumbers(removePunctuation(tolower(as.vector(train$Descript))))
descript_corpus <- Corpus(VectorSource(train$Descript))
descript_corpus = tm_map(descript_corpus, content_transformer(tolower))
descript_corpus = tm_map(descript_corpus, removeNumbers)
descript_corpus = tm_map(descript_corpus, removePunctuation)
descript_corpus = tm_map(descript_corpus, removeWords, c("the", "and"))
descript_corpus =  tm_map(descript_corpus, stripWhitespace)
descript_dtm <- DocumentTermMatrix(descript_corpus)
#descript_dtm
#inspect(descript_dtm)
descript_dtm <- removeSparseTerms(descript_dtm, 0.99)
findFreqTerms(descript_dtm, 1000)
raw_freq = data.frame(sort(colSums(as.matrix(descript_dtm)), decreasing=TRUE))
raw_freq
wordcloud(rownames(raw_freq), freq[,1], max.words=100, colors=brewer.pal(1, "Dark2"))
train$Dates
crime_by_time$Time <- as.POSIXct(train$Dates, format="%Y-%m-%d %H:%M:%S")
crime_by_time$Time <- as.POSIXct(train$Dates, format="%Y-%m-%d %H:%M:%S")
crime_by_time <- as.POSIXct(train$Dates, format="%Y-%m-%d %H:%M:%S")
crime_time <- as.POSIXct(train$Dates, format="%Y-%m-%d %H:%M:%S")
crime_time_df <- data.frame(as.POSIXct(train$Dates, format="%Y-%m-%d %H:%M:%S"))
crime_time_df
crime_time_df <- data.frame(Time=as.POSIXct(train$Dates, format="%Y-%m-%d %H:%M:%S"))
crime_time_df <- data.frame(Time=as.POSIXct(substring(train$Dates,12), format="%Y-%m-%d %H:%M:%S"))
substring(train$Dates,12)
crime_time_df <- data.frame(Time=as.POSIXct(substring(train$Dates,12), format="%H:%M:%S"))
crime_time_df
crime_time_df <- data.frame(Time=as.POSIXct(substring(train$Dates,12), format="%H:%M:%S"), Category=train$Category)
crime_time_df <- data.frame(Time=as.POSIXct(substring(train$Dates,12), format="%H:%M:%S"), Category=train$Category)
table(crime_time_df)
ggplot(data=crime_time_df, aes(x=crime_time_df$Time, y=)) + geom_point()
#train$Descript
library(tm)
descript <- removeNumbers(removePunctuation(tolower(as.vector(train$Descript))))
descript_corpus <- Corpus(VectorSource(train$Descript))
descript_corpus = tm_map(descript_corpus, content_transformer(tolower))
descript_corpus = tm_map(descript_corpus, removeNumbers)
descript_corpus = tm_map(descript_corpus, removePunctuation)
descript_corpus = tm_map(descript_corpus, removeWords, c("the", "and"))
descript_corpus =  tm_map(descript_corpus, stripWhitespace)
descript_dtm <- DocumentTermMatrix(descript_corpus)
#descript_dtm
#inspect(descript_dtm)
descript_dtm <- removeSparseTerms(descript_dtm, 0.99)
findFreqTerms(descript_dtm, 1000)
raw_freq = data.frame(sort(colSums(as.matrix(descript_dtm)), decreasing=TRUE))
raw_freq
wordcloud(rownames(raw_freq), freq[,1], max.words=100, colors=brewer.pal(1, "Dark2"))
crime_time_df
crime_time_df$Time
as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%H")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%M")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%d")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%Y")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%M")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%m")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%h")
format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%H")
crime_time_df$hour <- format(as.POSIXct(crime_time_df$Time, format="%Y-%m-%d %H:%M", tz="HKT"),"%H")
str(crime_time_df)
crime_time_df$hour <- as.integer(crime_time_df$hour)
crime_time_df$hour
crime_time_df_day <- crime_time_df[(crime_time_df$hour >= 8 & crime_time_df$hour <= 16),]
#train$Descript
library(tm)
descript <- removeNumbers(removePunctuation(tolower(as.vector(train$Descript))))
descript_corpus <- Corpus(VectorSource(train$Descript))
descript_corpus = tm_map(descript_corpus, content_transformer(tolower))
descript_corpus = tm_map(descript_corpus, removeNumbers)
descript_corpus = tm_map(descript_corpus, removePunctuation)
descript_corpus = tm_map(descript_corpus, removeWords, c("the", "and"))
descript_corpus =  tm_map(descript_corpus, stripWhitespace)
descript_dtm <- DocumentTermMatrix(descript_corpus)
#descript_dtm
#inspect(descript_dtm)
descript_dtm <- removeSparseTerms(descript_dtm, 0.99)
findFreqTerms(descript_dtm, 1000)
raw_freq = data.frame(sort(colSums(as.matrix(descript_dtm)), decreasing=TRUE))
raw_freq
wordcloud(rownames(raw_freq), freq[,1], max.words=50, colors=brewer.pal(1, "Dark2"))
#train$Descript
library(tm)
descript <- removeNumbers(removePunctuation(tolower(as.vector(train$Descript))))
descript_corpus <- Corpus(VectorSource(train$Descript))
descript_corpus = tm_map(descript_corpus, content_transformer(tolower))
descript_corpus = tm_map(descript_corpus, removeNumbers)
descript_corpus = tm_map(descript_corpus, removePunctuation)
#descript_corpus = tm_map(descript_corpus, removeWords, c("the", "and"))
descript_corpus =  tm_map(descript_corpus, stripWhitespace)
descript_dtm <- DocumentTermMatrix(descript_corpus)
#descript_dtm
#inspect(descript_dtm)
descript_dtm <- removeSparseTerms(descript_dtm, 0.99)
findFreqTerms(descript_dtm, 1000)
raw_freq = data.frame(sort(colSums(as.matrix(descript_dtm)), decreasing=TRUE))
raw_freq
wordcloud(rownames(raw_freq), freq[,1], max.words=50, colors=brewer.pal(1, "Dark2"))
#train$Descript
library(tm)
descript <- removeNumbers(removePunctuation(tolower(as.vector(train$Descript))))
descript_corpus <- Corpus(VectorSource(train$Descript))
descript_corpus = tm_map(descript_corpus, content_transformer(tolower))
descript_corpus = tm_map(descript_corpus, removeNumbers)
descript_corpus = tm_map(descript_corpus, removePunctuation)
descript_corpus = tm_map(descript_corpus, removeWords, c("the", "and"))
descript_corpus =  tm_map(descript_corpus, stripWhitespace)
descript_dtm <- DocumentTermMatrix(descript_corpus)
descript_dtm <- removeSparseTerms(descript_dtm, 0.95)
findFreqTerms(descript_dtm, 1000)
raw_freq = data.frame(sort(colSums(as.matrix(descript_dtm)), decreasing=TRUE))
raw_freq
wordcloud(rownames(raw_freq), freq[,1], max.words=50, colors=brewer.pal(1, "Dark2"))
#train$Descript
library(tm)
descript <- removeNumbers(removePunctuation(tolower(as.vector(train$Descript))))
descript_corpus <- Corpus(VectorSource(train$Descript))
descript_corpus = tm_map(descript_corpus, content_transformer(tolower))
descript_corpus = tm_map(descript_corpus, removeNumbers)
descript_corpus = tm_map(descript_corpus, removePunctuation)
descript_corpus = tm_map(descript_corpus, removeWords, c("the", "and"))
descript_corpus =  tm_map(descript_corpus, stripWhitespace)
descript_dtm <- DocumentTermMatrix(descript_corpus)
descript_dtm <- removeSparseTerms(descript_dtm, 0.95)
findFreqTerms(descript_dtm, 100)
raw_freq = data.frame(sort(colSums(as.matrix(descript_dtm)), decreasing=TRUE))
raw_freq
wordcloud(rownames(raw_freq), freq[,1], max.words=100, colors=brewer.pal(1, "Dark2"))
crime_location
top_crime_map
# Manipulate these values slightly so that we get some padding on our basemap between the edge of the data and the edge of the map
sf_bbox <- c(left = bbox[1, 1] - .01, bottom = bbox[2, 1] - .005,
right = bbox[1, 2] + .01, top = bbox[2, 2] + .005)
# Download the basemap
basemap <- get_stamenmap(
bbox = sf_bbox,
zoom = 13,
maptype = "toner-lite")
# Map it
bmMap <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco Crime Map")
bmMap + geom_point(data=crime_location, aes(x=X, y=Y, color=Category), size=0.7, alpha=0.3) + theme(legend.position = "right")
bmMapTop <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco Top Crime Map")
bmMap + geom_point(data=top_crime_map, aes(x=X, y=Y, color=Category), size=0.7, alpha=0.3) + theme(legend.position = "right")
# Manipulate these values slightly so that we get some padding on our basemap between the edge of the data and the edge of the map
sf_bbox <- c(left = bbox[1, 1] - .01, bottom = bbox[2, 1] - .005,
right = bbox[1, 2] + .01, top = bbox[2, 2] + .005)
# Download the basemap
basemap <- get_stamenmap(
bbox = sf_bbox,
zoom = 13,
maptype = "toner-lite")
# Map it
bmMap <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco Crime Map")
bmMap + geom_point(data=crime_location, aes(x=X, y=Y, color=Category), size=0.7, alpha=0.3) + theme(legend.position = "right")
bmMapTop <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco Top Crime Map")
bmMapTop + geom_point(data=top_crime_map, aes(x=X, y=Y, color=Category), size=0.7, alpha=0.3) + theme(legend.position = "right")
# Manipulate these values slightly so that we get some padding on our basemap between the edge of the data and the edge of the map
sf_bbox <- c(left = bbox[1, 1] - .01, bottom = bbox[2, 1] - .005,
right = bbox[1, 2] + .01, top = bbox[2, 2] + .005)
# Download the basemap
basemap <- get_stamenmap(
bbox = sf_bbox,
zoom = 13,
maptype = "toner-lite")
# Map it
bmMap <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco Crime Map")
bmMap + geom_point(data=crime_location, aes(x=X, y=Y, color=Category), size=0.7, alpha=0.3) + theme(legend.position = "right")
bmMapTop <- ggmap(basemap) + mapTheme() +
labs(title="San Francisco Top Crime Map")
bmMapTop + geom_point(data=top_crime_map, aes(x=X, y=Y, color=Category), size=0.7, alpha=0.3) + theme(legend.position = "right")
rm
rm(list=ls())
train <- read.csv(file="train.csv", na.strings=c(""))
train <- subset(train, select = -c(Descript, Resolution))
#test <- read.csv(file="test.csv", na.strings=c(""))
#test <- subset(test, select = -c(Id))
#full <- merge(train, test)
install.packages("gbm")
train$Year <- substring(train$Dates, 1, 4)
train$Month <- substring(train$Dates, 6, 7)
train$Season <- "Spring"
train[train$Month == "06" | train$Month == "07" | train$Month == "08",]$Season <- "Summer"
train[train$Month == "09" | train$Month == "10" | train$Month == "11",]$Season <- "Fall"
train[train$Month == "12" | train$Month == "01" | train$Month == "02",]$Season <- "Winter"
breaks <- c(0,6,10,14,18,24)/24
labels <- c("EarlyMorning","Morning","Noon","Afternoon","Evening")
library(chron)
train$TimeInDay <- cut(times(substring(train$Dates,12)), breaks, labels, include.lowest = T)
breaks <- c(0,5, 20, 24)/24
labels <- c("Night","Day","Night2")
train$DayNight <- cut(times(substring(train$Dates,12)), breaks, labels, include.lowest = T)
train$DayNight <- gsub("Night2", "Night", train$DayNight)
train <- subset(train, select = -c(Dates, Address))
train <- train[!(train$Y>50),]
train$Year <- as.factor(train$Year)
train$Month <- as.factor(train$Month)
train$Season <- as.factor(train$Season)
train$DayNight <- as.factor(train$DayNight)
set.seed(1234)
train_sample <- train[sample(nrow(train), 0.1*nrow(train)),]
train_sample$Year <- as.factor(train_sample$Year)
train_sample$Month <- as.factor(train_sample$Month)
train_sample$Season <- as.factor(train_sample$Season)
train_sample$DayNight <- as.factor(train_sample$DayNight)
train <- read.csv(file="train.csv", na.strings=c(""))
train <- read.csv(file="train.csv", na.strings=c(""))
train <- read.csv(file="train.csv", na.strings=c(""))
train <- read.csv(file="train.csv", na.strings=c(""))
source('~/Desktop/SFCrime/XGBoost.R', echo=TRUE)
source('~/Desktop/SFCrime/XGBoost.R', echo=TRUE)
?read.csv
setwd(dir = "Desktop/Sleep Lab/BARTmodel/mlab/optimize/")
merged <- read.csv("merge_original.csv")
View(train)
View(merged)
?rm
rm(train)
rm(train_sample)
rm(breaks)
rm(labels)
View(merged)
subs <- unique(merged$sub)
merged <- merged[,-451]
merged <- merged[-451, ]
View(merged)
subs <- unique(merged$sub)
print(sub)
for (sub in subs) {
print(sub)
}
print(merged$sub == sub)
merged$sub == 1
for (sub in subs) {
print(merged$sub == sub)
}
blocks <- unique(merged$block)
print(merged[sub_ind & block_ind, ])
subs <- unique(merged$sub)
blocks <- unique(merged$block)
for (sub in subs) {
sub_ind <- (merged$sub == sub)
for (block in blocks) {
block_ind <- (merged$block == block)
print(merged[sub_ind & block_ind, ])
}
}
fileName <- paste("sub", sub, "_", "block", block, ".csv")
fileName <- paste0("sub", sub, "_", "block", block, ".csv")
# Generate results
# Read in data
setwd(dir = "Desktop/Sleep Lab/BARTmodel/mlab/optimize/")
merged <- read.csv("merge_original.csv")
merged <- merged[-451, ]
subs <- unique(merged$sub)
blocks <- unique(merged$block)
for (sub in subs) {
sub_ind <- (merged$sub == sub)
for (block in blocks) {
block_ind <- (merged$block == block)
fileName <- paste0("sub", sub, "_", "block", block, ".csv")
write.csv(x = merged[sub_ind & block_ind, ], file = fileName)
}
}
# Generate results
# Read in data
setwd(dir = "Desktop/Sleep Lab/BARTmodel/mlab/optimize/")
merged <- read.csv("merge_original.csv")
merged <- merged[-451, ]
subs <- unique(merged$sub)
blocks <- unique(merged$block)
for (sub in subs) {
sub_ind <- (merged$sub == sub)
for (block in blocks) {
block_ind <- (merged$block == block)
fileName <- paste0("sub", sub, "_", "block", block, ".csv")
write.csv(x = merged[sub_ind & block_ind, ], file = fileName, row.names = F)
}
}
View(merged)
source('~/Desktop/Sleep Lab/BARTmodel/mlab/optimize/Generator.R', echo=TRUE)
write.csv(x = target, file = fileName, row.names = F)
for (block in blocks) {
block_ind <- (merged$block == block)
target <- merged[sub_ind & block_ind, ]
target$sub <- 1
fileName <- paste0("sub", sub, "_", "block", block, ".csv")
write.csv(x = target, file = fileName, row.names = F)
}
# Generate results
# Read in data
setwd(dir = "Desktop/Sleep Lab/BARTmodel/mlab/optimize/")
merged <- read.csv("merge_original.csv")
merged <- merged[-451, ]
subs <- unique(merged$sub)
blocks <- unique(merged$block)
for (sub in subs) {
sub_ind <- (merged$sub == sub)
for (block in blocks) {
block_ind <- (merged$block == block)
target <- merged[sub_ind & block_ind, ]
target$sub <- 1
fileName <- paste0("sub", sub, "_", "block", block, ".csv")
write.csv(x = target, file = fileName, row.names = F)
}
}
# Generate results
# Read in data
setwd(dir = "Desktop/Sleep Lab/BARTmodel/mlab/optimize/")
merged <- read.csv("merge_original.csv")
merged <- merged[-451, ]
subs <- unique(merged$sub)
blocks <- unique(merged$block)
for (sub in subs) {
sub_ind <- (merged$sub == sub)
for (block in blocks) {
block_ind <- (merged$block == block)
target <- merged[sub_ind & block_ind, ]
target$sub <- 1
fileName <- paste0("sub", sub, "_", "block", block, ".csv")
write.csv(x = target, file = fileName, row.names = F)
}
}
# Generate results
# Read in data
setwd(dir = "Desktop/Sleep Lab/BARTmodel/mlab/optimize/")
merged <- read.csv("merge_original.csv")
merged <- merged[-451, ]
subs <- unique(merged$sub)
blocks <- unique(merged$block)
for (sub in subs) {
sub_ind <- (merged$sub == sub)
for (block in blocks) {
block_ind <- (merged$block == block)
target <- merged[sub_ind & block_ind, ]
target$sub <- 1
fileName <- paste0("sub", sub, "_", "block", block, ".csv")
write.csv(x = target, file = fileName, row.names = F)
}
}
View(target)
